#!/usr/bin/env bash
#
# Copyright (c) 2021 SAP SE or an SAP affiliate company. All rights reserved. This file is licensed under the Apache Software License, v. 2 except as noted otherwise in the LICENSE file
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

set -e
source $(dirname "${0}")/common/helpers

kubeconfig="$KUBECONFIG"

if [[ $(k8s_env) == "$NODELESS" ]]; then
  kubeconfig="$(dirname $0)/local-garden/kubeconfigs/gardener-apiserver.conf"
else
  if [[ $(k8s_env) == "$KIND" ]]; then
    __tmp_kubeconfig="$(mktemp)"
    serviceaccount_based_kubeconfig "gardener-apiserver" > "$__tmp_kubeconfig"
  else
    mktemp_kubeconfig
  fi

  kubeconfig="$__tmp_kubeconfig"
  trap cleanup_kubeconfig EXIT
fi

mktemp_tls_dir
tls_dir="$__tmp_tls_dir"
trap cleanup_tls_dir EXIT

case $(k8s_env) in
  $REMOTE)
    TLS_CERT_FILE=$(dirname "${0}")/../../dev/tls/gardener-apiserver.crt
    TLS_KEY_FILE=$(dirname "${0}")/../../dev/tls/gardener-apiserver.key
    ;;
  *)
    TLS_CERT_FILE=$tls_dir/tls.crt
    TLS_KEY_FILE=$tls_dir/tls.key
    ;;
esac

apiserver_flags="
  --authentication-kubeconfig $kubeconfig \
  --authorization-kubeconfig $kubeconfig \
  --cluster-identity=gardener-local-${USER} \
  --authorization-always-allow-paths=/healthz \
  --kubeconfig $kubeconfig \
  --secure-port=8443 \
  --tls-cert-file $TLS_CERT_FILE \
  --tls-private-key-file $TLS_KEY_FILE \
  --feature-gates HAControlPlanes=true \
  --feature-gates SeedChange=true \
  --shoot-admin-kubeconfig-max-expiration=1h \
  --enable-admission-plugins=ShootVPAEnabledByDefault \
  --v 2"

if [[ "$(uname -s)" == "Linux" && "$(uname -r)" =~ "microsoft-standard" ]]; then
  apiserver_flags="${apiserver_flags} \
  --bind-address=127.0.0.1"
fi

ld_flags="$("$(dirname $0)"/../get-build-ld-flags.sh)"
case $(k8s_env) in
    $KIND)
        echo "Found kind ..."
        if [[ -z "$USE_IPV6" ]]; then
          ETCD_IP=ip6-localhost
        else
          ETCD_IP=localhost
        fi
        # If one uses the kind config from `make kind-up` (example/gardener-local/kind/cluster-local.yaml), there is
        # already a host port mapping for etcd on port 32379 (which is more stable than a kubectl port-forward).
        # If port 32379 is not open, fallback to port-forward.
        if ! nc -z -w 1 "${ETCD_IP}" 32379 &>/dev/null ; then
          kubectl -n garden port-forward service/etcd 32379:2379 > /dev/null &
          trap "kill -9 $! > /dev/null" EXIT
        fi
        GO111MODULE=on go run \
          -mod=vendor \
          -ldflags "$ld_flags" \
          "$(dirname $0)"/../../cmd/gardener-apiserver/main.go \
          --etcd-servers http://"${ETCD_IP}":32379 \
          $apiserver_flags
        ;;
    $DOCKER_FOR_DESKTOP)
        echo "Found Docker Kubernetes ..."
        GO111MODULE=on go run \
          -mod=vendor \
          -ldflags "$ld_flags" \
          "$(dirname $0)"/../../cmd/gardener-apiserver/main.go \
          --etcd-servers http://localhost:32379 \
          $apiserver_flags
        ;;
    $MINIKUBE)
        echo "Found Minikube ..."
        GO111MODULE=on go run \
          -mod=vendor \
          -ldflags "$ld_flags" \
          "$(dirname $0)"/../../cmd/gardener-apiserver/main.go \
          --etcd-servers http://$(minikube ip):32379 \
          $apiserver_flags
        ;;
    $NODELESS)
        echo "Found Nodeless Kubernetes ..."
        GO111MODULE=on go run \
          -mod=vendor \
          -ldflags "$ld_flags" \
          "$(dirname $0)"/../../cmd/gardener-apiserver/main.go \
          --etcd-servers http://localhost:22379 \
          $apiserver_flags
        ;;
    $REMOTE)
        echo "Found Remote Kubernetes ..."
        GO111MODULE=on go run \
          -mod=vendor \
          -ldflags "$ld_flags" \
          "$(dirname $0)"/../../cmd/gardener-apiserver/main.go \
          --etcd-servers http://localhost:22379 \
          $apiserver_flags
        ;;
esac
